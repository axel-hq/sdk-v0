import type * as key from "./api_key";
import type * as evt from "./events";
import type * as evf from "./event_framework";
import type * as pvr from "./providers/EIP_1193";
import type * as put from "./providers/util";
import type * as egg from "./client/estimate_gas";
import type * as swp from "./client/swap";
import type * as apy from "./client/get_apy";
import type * as bal from "./client/get_balance";
import type * as swr from "./client/get_swap_rate";
import type * as gsp from "./client/get_gas_price";
import type * as brw from "./client/borrow";
import type * as dps from "./client/yield";
import type * as lnd from "./client/lend";
import type * as stk from "./client/stake";
import type * as ubr from "./client/unborrow";
import type * as udp from "./client/unyield";
import type * as uld from "./client/unlend";
export type ClientStatic = {
    new (api_key: key.api_key): AxelClientInstance;
};
export interface AxelClientInstance {
    readonly api_key: key.api_key;
    readonly provider: pvr.EIP_1193_Provider | null;
    readonly on: evt.on;
    readonly off: evt.off;
    readonly connect_provider: evf.connect_provider;
    readonly get_accounts: put.get_accounts;
    readonly get_account: put.get_account;
    readonly get_chain_id: put.get_chain_id;
    readonly get_chain: put.get_chain;
    readonly unsafe_estimate_gas: egg.estimate_gas;
    readonly estimate_gas: egg.safe_estimate_gas;
    readonly unsafe_swap: swp.swap;
    readonly swap: swp.safe_swap;
    readonly unsafe_get_apy: apy.get_apy;
    readonly get_apy: apy.safe_get_apy;
    readonly unsafe_get_balance: bal.get_balance;
    readonly get_balance: bal.safe_get_balance;
    readonly unsafe_get_swap_rate: swr.get_swap_rate;
    readonly get_swap_rate: swr.safe_get_swap_rate;
    readonly unsafe_get_gas_price: gsp.get_gas_price;
    readonly get_gas_price: gsp.safe_get_gas_price;
    readonly unsafe_borrow: brw.borrow;
    readonly borrow: brw.safe_borrow;
    readonly unsafe_yield: dps.yiel‘Å;
    readonly yield: dps.safe_yield;
    readonly unsafe_lend: lnd.lend;
    readonly lend: lnd.safe_lend;
    readonly unsafe_stake: stk.stake;
    readonly stake: stk.safe_stake;
    readonly unsafe_unborrow: ubr.unborrow;
    readonly unborrow: ubr.safe_unborrow;
    readonly unsafe_unyield: udp.unyield;
    readonly unyield: udp.safe_unyield;
    readonly unsafe_unlend: uld.unlend;
    readonly unlend: uld.safe_unlend;
}
